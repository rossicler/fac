.data
str_add: .asciiz "ADD: "
str_sub: .asciiz "SUB: "
str_and: .asciiz "AND: "
str_or:  .asciiz "OR: "
str_xor: .asciiz "XOR: "
str_sll: .asciiz "SLL(3): "
str_srl: .asciiz "SRL(1): "
break_line: .asciiz "\n"
.text
main:
# Read a integer from input and save on $s0
li $v0, 5
syscall
move $s0, $v0

# Read a integer from input and save on $s1
li $v0, 5
syscall
move $s1, $v0

# Read the string str_add ("AND: ")
li  $v0, 4
la  $a0, str_add
syscall

# $t0 = $s0 + $s1
add $t0, $s0, $s1

# Print the result of the sum ($t0)
li  $v0, 1
move $a0, $t0
syscall

# Print a breakline
li  $v0, 4
la  $a0, break_line
syscall

# Read the string str_add ("SUB: ")
li  $v0, 4
la  $a0, str_sub
syscall

# $t0 = $s0 - $s1
sub $t0, $s0, $s1

# Print the result of the sub ($t0)
li  $v0, 1
move $a0, $t0
syscall

# Print a breakline
li  $v0, 4
la  $a0, break_line
syscall

# Read the string str_add ("AND: ")
li  $v0, 4
la  $a0, str_and
syscall

# $t0 = $s0 and $s1
and $t0, $s0, $s1

# Print the result of the and ($t0)
li  $v0, 1
move $a0, $t0
syscall

# Print a breakline
li  $v0, 4
la  $a0, break_line
syscall

# Read the string str_add ("OR: ")
li  $v0, 4
la  $a0, str_or
syscall

# $t0 = $s0 or $s1
or $t0, $s0, $s1

# Print the result of the or ($t0)
li  $v0, 1
move $a0, $t0
syscall

# Print a breakline
li  $v0, 4
la  $a0, break_line
syscall

# Read the string str_add ("XOR: ")
li  $v0, 4
la  $a0, str_xor
syscall

# $t0 = $s0 xor $s1
xor $t0, $s0, $s1

# Print the result of the xor ($t0)
li  $v0, 1
move $a0, $t0
syscall

# Print a breakline
li  $v0, 4
la  $a0, break_line
syscall

# Read the string str_add ("SLL(3): ")
li  $v0, 4
la  $a0, str_sll
syscall

# $t0 = sll 3 of $s0
sll $t0, $s0, 3

# Print the result of the xor ($t0)
li  $v0, 1
move $a0, $t0
syscall

# Print a breakline
li  $v0, 4
la  $a0, break_line
syscall

# Read the string str_add ("SRL(1): ")
li  $v0, 4
la  $a0, str_srl
syscall

# $t0 = srl 1 of $s1
srl $t0, $s1, 1

# Print the result of the xor ($t0)
li  $v0, 1
move $a0, $t0
syscall

# Print a breakline
li  $v0, 4
la  $a0, break_line
syscall
